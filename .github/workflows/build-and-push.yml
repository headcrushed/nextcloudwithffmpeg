name: Build and Push Docker Image

on:
  schedule:
    - cron: '0 *0 * * *' 
  workflow_dispatch: 

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check for new Nextcloud image
        id: check_nextcloud
        run: |
          docker pull nextcloud:latest
          NEXTCLOUD_IMAGE=$(docker inspect --format='{{index .RepoDigests 0}}' nextcloud:latest)
          echo "NEXTCLOUD_IMAGE=$NEXTCLOUD_IMAGE" >> $GITHUB_ENV

      - name: Check for changes
        id: check_changes
        run: |
          LAST_NEXTCOUD_DIGEST="${{ secrets.LAST_NEXTCLOUD_DIGEST }}"
          echo "LAST_NEXTCLOUD_DIGEST=$LAST_NEXTCLOUD_DIGEST"
          
          if [ "$NEXTCLOUD_IMAGE" != "$LAST_NEXTCLOUD_DIGEST" ]; then
            echo "New Nextcloud image detected."
            echo "NEXTCLOUD_IMAGE=$NEXTCLOUD_IMAGE" >> $GITHUB_ENV
            echo "new_nextcloud_image=true" >> $GITHUB_ENV
          else
            echo "No new Nextcloud image."
            echo "new_nextcloud_image=false" >> $GITHUB_ENV
          fi

      - name: Build and push Docker image
        if: env.new_nextcloud_image == 'true'
        run: |
          docker build -t edipdi/nc-with-ffmpeg-im:latest .
          docker push edipdi/nc-with-ffmpeg-im:latest

      - name: Update last digest (store it in a secret, or use GitHub Artifact/Cache)
        if: env.new_nextcloud_image == 'true'
        run: |
          echo "NEXTCLOUD_IMAGE=$NEXTCLOUD_IMAGE" >> $GITHUB_ENV
